{
  "titleSlug": "maximum-number-of-robots-within-budget",
  "acRate": 34.00461289545251,
  "content": "<p>You have <code>n</code> robots. You are given two <strong>0-indexed</strong> integer arrays, <code>chargeTimes</code> and <code>runningCosts</code>, both of length <code>n</code>. The <code>i<sup>th</sup></code> robot costs <code>chargeTimes[i]</code> units to charge and costs <code>runningCosts[i]</code> units to run. You are also given an integer <code>budget</code>.</p>\n\n<p>The <strong>total cost</strong> of running <code>k</code> chosen robots is equal to <code>max(chargeTimes) + k * sum(runningCosts)</code>, where <code>max(chargeTimes)</code> is the largest charge cost among the <code>k</code> robots and <code>sum(runningCosts)</code> is the sum of running costs among the <code>k</code> robots.</p>\n\n<p>Return<em> the <strong>maximum</strong> number of <strong>consecutive</strong> robots you can run such that the total cost <strong>does not</strong> exceed </em><code>budget</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> chargeTimes = [3,6,1,3,4], runningCosts = [2,1,3,4,5], budget = 25\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> \nIt is possible to run all individual and consecutive pairs of robots within budget.\nTo obtain answer 3, consider the first 3 robots. The total cost will be max(3,6,1) + 3 * sum(2,1,3) = 6 + 3 * 6 = 24 which is less than 25.\nIt can be shown that it is not possible to run more than 3 consecutive robots within budget, so we return 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> chargeTimes = [11,12,19], runningCosts = [10,8,7], budget = 19\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No robot can be run that does not exceed the budget, so we return 0.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>chargeTimes.length == runningCosts.length == n</code></li>\n\t<li><code>1 &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= chargeTimes[i], runningCosts[i] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= budget &lt;= 10<sup>15</sup></code></li>\n</ul>\n",
  "difficulty": "Hard",
  "freqBar": null,
  "frontendQuestionId": "2398",
  "hasSolution": false,
  "hasVideoSolution": false,
  "hints": [
    "Use binary search to convert the problem into checking if we can find a specific number of consecutive robots within the budget.",
    "Maintain a sliding window of the consecutive robots being considered.",
    "Use either a map, deque, or heap to find the maximum charge times in the window efficiently."
  ],
  "isFavor": false,
  "paidOnly": false,
  "similarQuestionList": [
    {
      "difficulty": "Hard",
      "titleSlug": "sliding-window-maximum",
      "title": "Sliding Window Maximum",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Hard",
      "titleSlug": "kth-smallest-product-of-two-sorted-arrays",
      "title": "Kth Smallest Product of Two Sorted Arrays",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Hard",
      "titleSlug": "maximum-number-of-tasks-you-can-assign",
      "title": "Maximum Number of Tasks You Can Assign",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Medium",
      "titleSlug": "minimized-maximum-of-products-distributed-to-any-store",
      "title": "Minimized Maximum of Products Distributed to Any Store",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Medium",
      "titleSlug": "minimum-time-to-complete-trips",
      "title": "Minimum Time to Complete Trips",
      "translatedTitle": null,
      "isPaidOnly": false
    }
  ],
  "status": null,
  "title": "Maximum Number of Robots Within Budget",
  "topicTags": [
    {
      "name": "Array",
      "id": "VG9waWNUYWdOb2RlOjU=",
      "slug": "array"
    },
    {
      "name": "Binary Search",
      "id": "VG9waWNUYWdOb2RlOjEx",
      "slug": "binary-search"
    },
    {
      "name": "Queue",
      "id": "VG9waWNUYWdOb2RlOjM0",
      "slug": "queue"
    },
    {
      "name": "Sliding Window",
      "id": "VG9waWNUYWdOb2RlOjU1ODIx",
      "slug": "sliding-window"
    },
    {
      "name": "Heap (Priority Queue)",
      "id": "VG9waWNUYWdOb2RlOjYxMDUw",
      "slug": "heap-priority-queue"
    },
    {
      "name": "Prefix Sum",
      "id": "VG9waWNUYWdOb2RlOjYxMDY4",
      "slug": "prefix-sum"
    }
  ]
}