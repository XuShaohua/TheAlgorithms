// Copyright (c) 2020 Xu Shaohua <shaohua@biofan.org>. All rights reserved.
// Use of this source is governed by General Public License that can be found
// in the LICENSE file.

#![feature(test)]
extern crate test;

/// Problem:
///
/// Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2.
/// The first ten pentagonal numbers are:
///
///     1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
///
/// It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
/// 70 − 22 = 48, is not pentagonal.
///
/// Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
/// difference are pentagonal and D = |Pk − Pj| is minimised;
/// what is the value of D?

fn method1() -> usize {
    const MAX: usize = 2500;
    let mut pentagons: [usize; MAX] = [0; MAX];
    for i in 1..MAX {
        let pentagon = i * (3 * i - 1) / 2;
        pentagons[i] = pentagon;
    }

    let mut min_pentagon = pentagons[MAX - 1];
    for i in 1..(MAX - 1) {
        for j in (i + 1)..MAX {
            let sum = pentagons[i] + pentagons[j];
            let sub = pentagons[j] - pentagons[i];
            if pentagons.binary_search(&sum).is_ok() && pentagons.binary_search(&sub).is_ok() {
                println!("> i: {}, j: {}, sub: {}", i, j, sub);
                if min_pentagon > sub {
                    min_pentagon = sub;
                }
            }
        }
    }

    min_pentagon
}


fn main() {
    println!("method1: {}", method1());
}

#[bench]
fn bench_method1(b: &mut test::Bencher) {
    b.iter(|| assert_eq!(method1(), 5482660));
}
