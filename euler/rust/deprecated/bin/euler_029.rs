// Copyright (c) 2020 Xu Shaohua <shaohua@biofan.org>. All rights reserved.
// Use of this source is governed by General Public License that can be found
// in the LICENSE file.

#![feature(test)]
extern crate num_bigint;
extern crate test;

use num_bigint::BigUint;
use std::collections::HashSet;

/// Problem:
///
/// Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
///
///     2^2=4, 2^3=8, 2^4=16, 2^5=32
///     3^2=9, 3^3=27, 3^4=81, 3^5=243
///     4^2=16, 4^3=64, 4^4=256, 4^5=1024
///     5^2=25, 5^3=125, 5^4=625, 5^5=3125
///
/// If they are then placed in numerical order, with any repeats removed,
/// we get the following sequence of 15 distinct terms:
///
///     4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
///
/// How many distinct terms are in the sequence generated by ab for
/// 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?

fn method1() -> usize {
    let mut set = HashSet::<String>::new();

    let mut big_num: BigUint;
    for i in 2_u16..=100 {
        big_num = BigUint::from(i);
        for _j in 2_u16..=100 {
            big_num *= i;
            set.insert(big_num.to_string());
        }
    }

    set.len()
}

fn main() {
    println!("method1: {}", method1());
}

#[bench]
fn bench_method1(b: &mut test::Bencher) {
    b.iter(|| assert_eq!(method1(), 9183));
}
