// Copyright (c) 2020 Xu Shaohua <shaohua@biofan.org>. All rights reserved.
// Use of this source is governed by General Public License that can be found
// in the LICENSE file.

#![feature(test)]
extern crate test;

/// Problem:
///
/// The sequence of triangle numbers is generated by adding the natural numbers.
/// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
/// The first ten terms would be:
///     1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
/// Let us list the factors of the first seven triangle numbers:
///    1: 1
///    3: 1,3
///    6: 1,2,3,6
///   10: 1,2,5,10
///   15: 1,3,5,15
///   21: 1,3,7,21
///   28: 1,2,4,7,14,28
/// We can see that 28 is the first triangle number to have over five divisors.
/// What is the value of the first triangle number to have over
/// five hundred divisors?

fn get_num_factors(n: usize, primes: &[usize]) -> u16 {
    let prime_factors = euler::primes::get_prime_factors(n, primes);
    let mut num_factors = 1;
    for factor in &prime_factors {
        num_factors *= factor.count + 1;
    }

    num_factors
}

/// Ref:
/// * https://www.allmathtricks.com/factors-number/
fn method1() -> usize {
    //let f(n) = n * (n + 1) / 2;
    let mut s = 0;
    let primes = euler::primes::get_prime_list(100_000);
    for i in 1.. {
        s += i;
        let num_factors = get_num_factors(s, &primes);
        if num_factors > 500 {
            return s;
        }
    }
    0
}

fn factor(num: u32) -> u32 {
    let mut buffer = 0;

    let mut i = 1;
    while i * i < num {
        if num % i == 0 {
            buffer += 1;
        }
        i += 1;
    }
    buffer * 2
}

fn method2() -> u32 {
    let mut trinum = 0;
    for i in 1.. {
        trinum += i;
        if factor(trinum) >= 500 {
            break;
        }
    }

    trinum
}

fn main() {
    println!("method1: {}", method1());
    println!("method2: {}", method2());
}

#[bench]
fn bench_method1(b: &mut test::Bencher) {
    b.iter(|| assert_eq!(method1(), 76576500));
}

#[bench]
fn bench_method2(b: &mut test::Bencher) {
    b.iter(|| assert_eq!(method2(), 76576500));
}
