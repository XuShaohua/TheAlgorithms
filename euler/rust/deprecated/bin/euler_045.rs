// Copyright (c) 2020 Xu Shaohua <shaohua@biofan.org>. All rights reserved.
// Use of this source is governed by General Public License that can be found
// in the LICENSE file.

#![feature(test)]
extern crate test;

/// Problem:
///
/// Triangle, pentagonal, and hexagonal numbers are generated by the following
/// formulae:
///
/// Triangle Tn=n(n+1)/2 1, 3, 6, 10, 15, ...
/// Pentagonal Pn=n(3n−1)/2 1, 5, 12, 22, 35, ...
/// Hexagonal Hn=n(2n−1) 1, 6, 15, 28, 45, ...
///
/// It can be verified that T285 = P165 = H143 = 40755.
///
/// Find the next triangle number that is also pentagonal and hexagonal.

fn method1() -> u64 {
    let mut i = 286;
    let mut j = 166;
    let mut k = 144;
    loop {
        let triangle = i * (i + 1) / 2;
        let pentagonal = j * (3 * j - 1) / 2;
        if triangle == pentagonal {
            println!("> i: {}, j: {}, triangle: {}", i, j, triangle);
            loop {
                let hexagonal = k * (2 * k - 1);
                if triangle == hexagonal {
                    println!("> i: {}, j: {}, k: {}", i, j, k);
                    println!(
                        ">> triangle: {}, pentagonal: {}, hexagonal: {}",
                        triangle, pentagonal, hexagonal
                    );
                    return triangle;
                } else if triangle > hexagonal {
                    k += 1;
                } else {
                    break;
                }
            }
            i += 1;
        } else if triangle > pentagonal {
            j += 1;
        } else if triangle < pentagonal {
            i += 1;
        }
    }
}

fn main() {
    println!("method1: {}", method1());
}

#[bench]
fn bench_method1(b: &mut test::Bencher) {
    b.iter(|| assert_eq!(method1(), 1533776805));
}
