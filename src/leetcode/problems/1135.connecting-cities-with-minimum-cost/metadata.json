{
  "titleSlug": "connecting-cities-with-minimum-cost",
  "acRate": 61.84096986680564,
  "content": null,
  "difficulty": "Medium",
  "freqBar": null,
  "frontendQuestionId": "1135",
  "hasSolution": true,
  "hasVideoSolution": false,
  "hints": [
    "What if we model the cities as a graph?",
    "Build a graph of cities and find the minimum spanning tree.",
    "You can use a variation of the Kruskal's algorithm for that.",
    "Sort the edges by their cost and use a union-find data structure.",
    "How to check all cities are connected?",
    "At the beginning we have n connected components, each time we connect two components the number of connected components is reduced by one. At the end we should end with only a single component otherwise return -1."
  ],
  "isFavor": false,
  "paidOnly": true,
  "similarQuestionList": [
    {
      "difficulty": "Medium",
      "titleSlug": "minimum-cost-to-reach-city-with-discounts",
      "title": "Minimum Cost to Reach City With Discounts",
      "translatedTitle": null,
      "isPaidOnly": true
    }
  ],
  "status": null,
  "title": "Connecting Cities With Minimum Cost",
  "topicTags": [
    {
      "name": "Union Find",
      "id": "VG9waWNUYWdOb2RlOjIz",
      "slug": "union-find"
    },
    {
      "name": "Graph",
      "id": "VG9waWNUYWdOb2RlOjI0",
      "slug": "graph"
    },
    {
      "name": "Heap (Priority Queue)",
      "id": "VG9waWNUYWdOb2RlOjYxMDUw",
      "slug": "heap-priority-queue"
    },
    {
      "name": "Minimum Spanning Tree",
      "id": "VG9waWNUYWdOb2RlOjYxMDgz",
      "slug": "minimum-spanning-tree"
    }
  ]
}