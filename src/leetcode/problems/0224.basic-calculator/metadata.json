{
  "titleSlug": "basic-calculator",
  "acRate": 43.26125736266378,
  "content": "<p>Given a string <code>s</code> representing a valid expression, implement a basic calculator to evaluate it, and return <em>the result of the evaluation</em>.</p>\n\n<p><strong>Note:</strong> You are <strong>not</strong> allowed to use any built-in function which evaluates strings as mathematical expressions, such as <code>eval()</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;1 + 1&quot;\n<strong>Output:</strong> 2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot; 2-1 + 2 &quot;\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;(1+(4+5+2)-3)+(6+8)&quot;\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of digits, <code>&#39;+&#39;</code>, <code>&#39;-&#39;</code>, <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, and <code>&#39; &#39;</code>.</li>\n\t<li><code>s</code> represents a valid expression.</li>\n\t<li><code>&#39;+&#39;</code> is <strong>not</strong> used as a unary operation (i.e., <code>&quot;+1&quot;</code> and <code>&quot;+(2 + 3)&quot;</code> is invalid).</li>\n\t<li><code>&#39;-&#39;</code> could be used as a unary operation (i.e., <code>&quot;-1&quot;</code> and <code>&quot;-(2 + 3)&quot;</code> is valid).</li>\n\t<li>There will be no two consecutive operators in the input.</li>\n\t<li>Every number and running calculation will fit in a signed 32-bit integer.</li>\n</ul>\n",
  "difficulty": "Hard",
  "freqBar": null,
  "frontendQuestionId": "224",
  "hasSolution": true,
  "hasVideoSolution": false,
  "hints": [],
  "isFavor": false,
  "paidOnly": false,
  "similarQuestionList": [
    {
      "difficulty": "Medium",
      "titleSlug": "evaluate-reverse-polish-notation",
      "title": "Evaluate Reverse Polish Notation",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Medium",
      "titleSlug": "basic-calculator-ii",
      "title": "Basic Calculator II",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Medium",
      "titleSlug": "different-ways-to-add-parentheses",
      "title": "Different Ways to Add Parentheses",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Hard",
      "titleSlug": "expression-add-operators",
      "title": "Expression Add Operators",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Hard",
      "titleSlug": "basic-calculator-iii",
      "title": "Basic Calculator III",
      "translatedTitle": null,
      "isPaidOnly": true
    },
    {
      "difficulty": "Hard",
      "titleSlug": "the-score-of-students-solving-math-expression",
      "title": "The Score of Students Solving Math Expression",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Medium",
      "titleSlug": "minimize-result-by-adding-parentheses-to-expression",
      "title": "Minimize Result by Adding Parentheses to Expression",
      "translatedTitle": null,
      "isPaidOnly": false
    }
  ],
  "status": null,
  "title": "Basic Calculator",
  "topicTags": [
    {
      "name": "Math",
      "id": "VG9waWNUYWdOb2RlOjg=",
      "slug": "math"
    },
    {
      "name": "String",
      "id": "VG9waWNUYWdOb2RlOjEw",
      "slug": "string"
    },
    {
      "name": "Stack",
      "id": "VG9waWNUYWdOb2RlOjE1",
      "slug": "stack"
    },
    {
      "name": "Recursion",
      "id": "VG9waWNUYWdOb2RlOjMx",
      "slug": "recursion"
    }
  ]
}