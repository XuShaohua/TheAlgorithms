{
  "titleSlug": "prefix-and-suffix-search",
  "acRate": 41.03063826109503,
  "content": "<p>Design a special dictionary that searches the words in it by a prefix and a suffix.</p>\n\n<p>Implement the <code>WordFilter</code> class:</p>\n\n<ul>\n\t<li><code>WordFilter(string[] words)</code> Initializes the object with the <code>words</code> in the dictionary.</li>\n\t<li><code>f(string pref, string suff)</code> Returns <em>the index of the word in the dictionary,</em> which has the prefix <code>pref</code> and the suffix <code>suff</code>. If there is more than one valid index, return <strong>the largest</strong> of them. If there is no such word in the dictionary, return <code>-1</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;WordFilter&quot;, &quot;f&quot;]\n[[[&quot;apple&quot;]], [&quot;a&quot;, &quot;e&quot;]]\n<strong>Output</strong>\n[null, 0]\n<strong>Explanation</strong>\nWordFilter wordFilter = new WordFilter([&quot;apple&quot;]);\nwordFilter.f(&quot;a&quot;, &quot;e&quot;); // return 0, because the word at index 0 has prefix = &quot;a&quot; and suffix = &quot;e&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= words[i].length &lt;= 7</code></li>\n\t<li><code>1 &lt;= pref.length, suff.length &lt;= 7</code></li>\n\t<li><code>words[i]</code>, <code>pref</code> and <code>suff</code> consist of lowercase English letters only.</li>\n\t<li>At most <code>10<sup>4</sup></code> calls will be made to the function <code>f</code>.</li>\n</ul>\n",
  "difficulty": "Hard",
  "freqBar": null,
  "frontendQuestionId": "745",
  "hasSolution": true,
  "hasVideoSolution": false,
  "hints": [
    "Take \"apple\" as an example, we will insert add \"apple{apple\", \"pple{apple\", \"ple{apple\", \"le{apple\", \"e{apple\", \"{apple\" into the Trie Tree.",
    "If the query is: prefix = \"app\", suffix = \"le\", we can find it by querying our trie for\r\n\"le { app\".",
    "We use '{' because in ASCii Table, '{' is next to 'z', so we just need to create new TrieNode[27] instead of 26. Also, compared with traditional Trie, we add the attribute weight in class TrieNode.\r\nYou can still choose any different character."
  ],
  "isFavor": false,
  "paidOnly": false,
  "similarQuestionList": [
    {
      "difficulty": "Medium",
      "titleSlug": "design-add-and-search-words-data-structure",
      "title": "Design Add and Search Words Data Structure",
      "translatedTitle": null,
      "isPaidOnly": false
    }
  ],
  "status": null,
  "title": "Prefix and Suffix Search",
  "topicTags": [
    {
      "name": "Hash Table",
      "id": "VG9waWNUYWdOb2RlOjY=",
      "slug": "hash-table"
    },
    {
      "name": "String",
      "id": "VG9waWNUYWdOb2RlOjEw",
      "slug": "string"
    },
    {
      "name": "Design",
      "id": "VG9waWNUYWdOb2RlOjI1",
      "slug": "design"
    },
    {
      "name": "Trie",
      "id": "VG9waWNUYWdOb2RlOjI3",
      "slug": "trie"
    }
  ]
}