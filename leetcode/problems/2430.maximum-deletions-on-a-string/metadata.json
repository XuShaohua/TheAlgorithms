{
  "titleSlug": "maximum-deletions-on-a-string",
  "acRate": 32.89361371925196,
  "content": "<p>You are given a string <code>s</code> consisting of only lowercase English letters. In one operation, you can:</p>\n\n<ul>\n\t<li>Delete <strong>the entire string</strong> <code>s</code>, or</li>\n\t<li>Delete the <strong>first</strong> <code>i</code> letters of <code>s</code> if the first <code>i</code> letters of <code>s</code> are <strong>equal</strong> to the following <code>i</code> letters in <code>s</code>, for any <code>i</code> in the range <code>1 &lt;= i &lt;= s.length / 2</code>.</li>\n</ul>\n\n<p>For example, if <code>s = &quot;ababc&quot;</code>, then in one operation, you could delete the first two letters of <code>s</code> to get <code>&quot;abc&quot;</code>, since the first two letters of <code>s</code> and the following two letters of <code>s</code> are both equal to <code>&quot;ab&quot;</code>.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of operations needed to delete all of </em><code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abcabcdabc&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n- Delete the first 3 letters (&quot;abc&quot;) since the next 3 letters are equal. Now, s = &quot;abcdabc&quot;.\n- Delete all the letters.\nWe used 2 operations so return 2. It can be proven that 2 is the maximum number of operations needed.\nNote that in the second operation we cannot delete &quot;abc&quot; again because the next occurrence of &quot;abc&quot; does not happen in the next 3 letters.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabaab&quot;\n<strong>Output:</strong> 4\n<strong>Explanation:</strong>\n- Delete the first letter (&quot;a&quot;) since the next letter is equal. Now, s = &quot;aabaab&quot;.\n- Delete the first 3 letters (&quot;aab&quot;) since the next 3 letters are equal. Now, s = &quot;aab&quot;.\n- Delete the first letter (&quot;a&quot;) since the next letter is equal. Now, s = &quot;ab&quot;.\n- Delete all the letters.\nWe used 4 operations so return 4. It can be proven that 4 is the maximum number of operations needed.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaaaa&quot;\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> In each operation, we can delete the first letter of s.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 4000</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n</ul>\n",
  "difficulty": "Hard",
  "freqBar": null,
  "frontendQuestionId": "2430",
  "hasSolution": false,
  "hasVideoSolution": false,
  "hints": [
    "We can use dynamic programming to find the answer. Create a 0-indexed dp array where dp[i] represents the maximum number of moves needed to remove the first i + 1 letters from s.",
    "What should we do if there is an i where it is impossible to remove the first i + 1 letters?",
    "Use a sentinel value such as -1 to show that it is impossible.",
    "How can we quickly determine if two substrings of s are equal? We can use hashing."
  ],
  "isFavor": false,
  "paidOnly": false,
  "similarQuestionList": [
    {
      "difficulty": "Hard",
      "titleSlug": "shortest-palindrome",
      "title": "Shortest Palindrome",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Hard",
      "titleSlug": "longest-happy-prefix",
      "title": "Longest Happy Prefix",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Medium",
      "titleSlug": "remove-all-occurrences-of-a-substring",
      "title": "Remove All Occurrences of a Substring",
      "translatedTitle": null,
      "isPaidOnly": false
    }
  ],
  "status": null,
  "title": "Maximum Deletions on a String",
  "topicTags": [
    {
      "name": "String",
      "id": "VG9waWNUYWdOb2RlOjEw",
      "slug": "string"
    },
    {
      "name": "Dynamic Programming",
      "id": "VG9waWNUYWdOb2RlOjEz",
      "slug": "dynamic-programming"
    },
    {
      "name": "Rolling Hash",
      "id": "VG9waWNUYWdOb2RlOjU2NTk4",
      "slug": "rolling-hash"
    },
    {
      "name": "String Matching",
      "id": "VG9waWNUYWdOb2RlOjYxMDUy",
      "slug": "string-matching"
    },
    {
      "name": "Hash Function",
      "id": "VG9waWNUYWdOb2RlOjYxMDY1",
      "slug": "hash-function"
    }
  ]
}