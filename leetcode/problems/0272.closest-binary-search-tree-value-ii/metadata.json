{
  "titleSlug": "closest-binary-search-tree-value-ii",
  "acRate": 58.93749398834625,
  "content": null,
  "difficulty": "Hard",
  "freqBar": null,
  "frontendQuestionId": "272",
  "hasSolution": true,
  "hasVideoSolution": false,
  "hints": [
    "Consider implement these two helper functions:\r\n<ol type=\"i\"><li><code>getPredecessor(N)</code>, which returns the next smaller node to N.</li>\r\n<li><code>getSuccessor(N)</code>, which returns the next larger node to N.</li>\r\n</ol>",
    "Try to assume that each node has a parent pointer, it makes the problem much easier.",
    "Without parent pointer we just need to keep track of the path from the root to the current node using a stack.",
    "You would need two stacks to track the path in finding predecessor and successor node separately."
  ],
  "isFavor": false,
  "paidOnly": true,
  "similarQuestionList": [
    {
      "difficulty": "Easy",
      "titleSlug": "binary-tree-inorder-traversal",
      "title": "Binary Tree Inorder Traversal",
      "translatedTitle": null,
      "isPaidOnly": false
    },
    {
      "difficulty": "Easy",
      "titleSlug": "closest-binary-search-tree-value",
      "title": "Closest Binary Search Tree Value",
      "translatedTitle": null,
      "isPaidOnly": true
    },
    {
      "difficulty": "Medium",
      "titleSlug": "closest-nodes-queries-in-a-binary-search-tree",
      "title": "Closest Nodes Queries in a Binary Search Tree",
      "translatedTitle": null,
      "isPaidOnly": false
    }
  ],
  "status": null,
  "title": "Closest Binary Search Tree Value II",
  "topicTags": [
    {
      "name": "Two Pointers",
      "id": "VG9waWNUYWdOb2RlOjk=",
      "slug": "two-pointers"
    },
    {
      "name": "Stack",
      "id": "VG9waWNUYWdOb2RlOjE1",
      "slug": "stack"
    },
    {
      "name": "Tree",
      "id": "VG9waWNUYWdOb2RlOjIw",
      "slug": "tree"
    },
    {
      "name": "Depth-First Search",
      "id": "VG9waWNUYWdOb2RlOjIx",
      "slug": "depth-first-search"
    },
    {
      "name": "Binary Search Tree",
      "id": "VG9waWNUYWdOb2RlOjMw",
      "slug": "binary-search-tree"
    },
    {
      "name": "Heap (Priority Queue)",
      "id": "VG9waWNUYWdOb2RlOjYxMDUw",
      "slug": "heap-priority-queue"
    },
    {
      "name": "Binary Tree",
      "id": "VG9waWNUYWdOb2RlOjYxMDU3",
      "slug": "binary-tree"
    }
  ]
}