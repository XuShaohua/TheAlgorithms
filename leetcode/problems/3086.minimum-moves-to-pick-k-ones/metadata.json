{
  "titleSlug": "minimum-moves-to-pick-k-ones",
  "acRate": 19.411844057736406,
  "content": "<p>You are given a <strong>0-indexed</strong> binary array <code>nums</code> of length <code>n</code>, a <strong>positive</strong> integer <code>k</code> and a <strong>non-negative</strong> integer <code>maxChanges</code>.</p>\n\n<p>Dylan Smith plays a game, where the goal is for Dylan to pick up <code>k</code> ones from <code>nums</code> using the <strong>minimum</strong> number of <strong>moves</strong>. When the game starts, Dylan picks up any index <code>dylanIndex</code> in the range <code>[0, n - 1]</code> and stands there. If <code>nums[dylanIndex] == 1</code> , Dylan picks up the one and <code>nums[dylanIndex]</code> becomes <code>0</code>(this <strong>does not</strong> count as a move). After this, Dylan can make <strong>any</strong> number of <strong>moves</strong> (<strong>including</strong> <strong>zero</strong>) where in each move Dylan must perform <strong>exactly</strong> one of the following actions:</p>\n\n<ul>\n\t<li>Select any index <code>j != dylanIndex</code> such that <code>nums[j] == 0</code> and set <code>nums[j] = 1</code>. This action can be performed <strong>at</strong> <strong>most</strong> <code>maxChanges</code> times.</li>\n\t<li>Select any two adjacent indices <code>x</code> and <code>y</code> (<code>|x - y| == 1</code>) such that <code>nums[x] == 1</code>, <code>nums[y] == 0</code>, then swap their values (set <code>nums[y] = 1</code> and <code>nums[x] = 0</code>). If <code>y == dylanIndex</code>, Dylan picks up the one after this move and <code>nums[y]</code> becomes <code>0</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>minimum</strong> number of moves required by Dylan to pick <strong>exactly </strong></em><code>k</code> <em>ones</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [1,1,0,0,0,1,1,0,0,1], k = 3, maxChanges = 1</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">3</span></p>\n\n<p><strong>Explanation:</strong> Dylan can pick up <code>3</code> ones in <code>3</code> moves, if Dylan performs the following actions in each move when standing at <code>dylanIndex == 1</code>:</p>\n\n<ul>\n\t<li>&nbsp;At the start of the game Dylan picks up the one and <code>nums[1]</code> becomes <code>0</code>. <code>nums</code> becomes <code>[1,<strong><u>0</u></strong>,1,0,0,1,1,0,0,1]</code>.</li>\n\t<li>Select <code>j == 2</code> and perform an action of the first type. <code>nums</code> becomes <code>[1,<strong><u>0</u></strong>,1,0,0,1,1,0,0,1]</code></li>\n\t<li>Select <code>x == 2</code> and <code>y == 1</code>, and perform an action of the second type. <code>nums</code> becomes <code>[1,<strong><u>1</u></strong>,0,0,0,1,1,0,0,1]</code>. As <code>y == dylanIndex</code>, Dylan picks up the one and <code>nums</code> becomes&nbsp;<code>[1,<strong><u>0</u></strong>,0,0,0,1,1,0,0,1]</code>.</li>\n\t<li>Select <code>x == 0</code> and <code>y == 1</code>, and perform an action of the second type. <code>nums</code> becomes <code>[0,<strong><u>1</u></strong>,0,0,0,1,1,0,0,1]</code>. As <code>y == dylanIndex</code>, Dylan picks up the one and <code>nums</code> becomes&nbsp;<code>[0,<strong><u>0</u></strong>,0,0,0,1,1,0,0,1]</code>.</li>\n</ul>\n\n<p>Note that it may be possible for Dylan to pick up <code>3</code> ones using some other sequence of <code>3</code> moves.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\" style=\"border-color: var(--border-tertiary); border-left-width: 2px; color: var(--text-secondary); font-size: .875rem; margin-bottom: 1rem; margin-top: 1rem; overflow: visible; padding-left: 1rem;\">\n<p><strong>Input: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">nums = [0,0,0,0], k = 2, maxChanges = 3</span></p>\n\n<p><strong>Output: </strong><span class=\"example-io\" style=\"font-family: Menlo,sans-serif; font-size: 0.85rem;\">4</span></p>\n\n<p><strong>Explanation:</strong> Dylan can pick up <code>2</code> ones in <code>4</code> moves, if Dylan performs the following actions in each move when standing at <code>dylanIndex == 0</code>:</p>\n\n<ul>\n\t<li>Select <code>j == 1</code> and perform an action of the first type. <code>nums</code> becomes <code>[<strong><u>0</u></strong>,1,0,0]</code>.</li>\n\t<li>Select <code>x == 1</code> and <code>y == 0</code>, and perform an action of the second type. <code>nums</code> becomes <code>[<strong><u>1</u></strong>,0,0,0]</code>. As <code>y == dylanIndex</code>, Dylan picks up the one and <code>nums</code> becomes&nbsp;<code>[<strong><u>0</u></strong>,0,0,0]</code>.</li>\n\t<li>Select <code>j == 1</code> again and perform an action of the first type. <code>nums</code> becomes <code>[<strong><u>0</u></strong>,1,0,0]</code>.</li>\n\t<li>Select <code>x == 1</code> and <code>y == 0</code> again, and perform an action of the second type. <code>nums</code> becomes <code>[<strong><u>1</u></strong>,0,0,0]</code>. As <code>y == dylanIndex</code>, Dylan picks up the one and <code>nums</code> becomes&nbsp;<code>[<strong><u>0</u></strong>,0,0,0]</code>.</li>\n</ul>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1</code></li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= maxChanges &lt;= 10<sup>5</sup></code></li>\n\t<li><code>maxChanges + sum(nums) &gt;= k</code></li>\n</ul>\n",
  "difficulty": "Hard",
  "freqBar": null,
  "frontendQuestionId": "3086",
  "hasSolution": false,
  "hasVideoSolution": false,
  "hints": [
    "Ones created using a change require <code>2</code> moves. Hence except for the immediate neighbors of the index where we move all the ones, we should try to use change operations.",
    "For some subset of ones, it is always better to move the ones to the median position.",
    "We only need to be concerned with the indices where <code>nums[i] == 1</code>."
  ],
  "isFavor": false,
  "paidOnly": false,
  "similarQuestionList": [
    {
      "difficulty": "Medium",
      "titleSlug": "minimum-swaps-to-group-all-1s-together",
      "title": "Minimum Swaps to Group All 1's Together",
      "translatedTitle": null,
      "isPaidOnly": true
    }
  ],
  "status": null,
  "title": "Minimum Moves to Pick K Ones",
  "topicTags": [
    {
      "name": "Array",
      "id": "VG9waWNUYWdOb2RlOjU=",
      "slug": "array"
    },
    {
      "name": "Greedy",
      "id": "VG9waWNUYWdOb2RlOjE3",
      "slug": "greedy"
    },
    {
      "name": "Sliding Window",
      "id": "VG9waWNUYWdOb2RlOjU1ODIx",
      "slug": "sliding-window"
    },
    {
      "name": "Prefix Sum",
      "id": "VG9waWNUYWdOb2RlOjYxMDY4",
      "slug": "prefix-sum"
    }
  ]
}